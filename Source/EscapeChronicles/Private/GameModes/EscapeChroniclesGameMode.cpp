// Copyright Epic Games, Inc. All Rights Reserved.

#include "EscapeChronicles/Public/GameModes/EscapeChroniclesGameMode.h"

#include "Controllers/PlayerControllers/EscapeChroniclesPlayerController.h"
#include "EscapeChronicles/Public/Characters/EscapeChroniclesCharacter.h"
#include "GameState/EscapeChroniclesGameState.h"
#include "PlayerStates/EscapeChroniclesPlayerState.h"
#include "Subsystems/SaveGameSubsystem.h"

AEscapeChroniclesGameMode::AEscapeChroniclesGameMode()
{
	GameStateClass = AEscapeChroniclesGameState::StaticClass();
	DefaultPawnClass = AEscapeChroniclesCharacter::StaticClass();
	PlayerControllerClass = AEscapeChroniclesPlayerController::StaticClass();
	PlayerStateClass = AEscapeChroniclesPlayerState::StaticClass();
}

void AEscapeChroniclesGameMode::InitGame(const FString& MapName, const FString& Options, FString& ErrorMessage)
{
	Super::InitGame(MapName, Options, ErrorMessage);

	USaveGameSubsystem* SaveGameSubsystem = GetWorld()->GetSubsystem<USaveGameSubsystem>();

	if (!ensureAlways(SaveGameSubsystem))
	{
		return;
	}

	SaveGameSubsystem->OnGameLoaded.AddUObject(this, &AEscapeChroniclesGameMode::OnInitialGameLoadFinishedOrFailed);

	SaveGameSubsystem->OnFailedToLoadGame.AddUObject(this,
		&AEscapeChroniclesGameMode::OnInitialGameLoadFinishedOrFailed);

	// Automatically try to load the game when it has started
	SaveGameSubsystem->LoadGameAndInitializeUniquePlayerIDs();
}

FString AEscapeChroniclesGameMode::InitNewPlayer(APlayerController* NewPlayerController,
	const FUniqueNetIdRepl& UniqueId, const FString& Options, const FString& Portal)
{
	const FString ParentResult = Super::InitNewPlayer(NewPlayerController, UniqueId, Options, Portal);

	if (!ensureAlways(NewPlayerController->PlayerState))
	{
		return ParentResult;
	}

	/**
	 * We can load the joined player from the last save game object that was saved or loaded (if any) only if the
	 * game was already loaded or failed to be loaded. If the loading hasn't finished yet, then add the player to the
	 * list of players to load. Even though the players are loaded automatically by the SaveGameSubsystem when the game
	 * is loaded, this new joined player may still not be initialized correctly when this happens. FUniquePlayerID for
	 * this player will be generated by the same logic but also even if the game fails to load.
	 */
	if (bInitialGameLoadFinishedOrFailed)
	{
		LoadPlayerNowOrWhenPawnIsPossessed(NewPlayerController);
	}
	else
	{
		PlayersWaitingToBeLoaded.Add(NewPlayerController);
	}

	return ParentResult;
}

void AEscapeChroniclesGameMode::OnInitialGameLoadFinishedOrFailed()
{
	bInitialGameLoadFinishedOrFailed = true;

	for (const TWeakObjectPtr<APlayerController>& PlayerController : PlayersWaitingToBeLoaded)
	{
		if (PlayerController.IsValid())
		{
			LoadPlayerNowOrWhenPawnIsPossessed(PlayerController.Get());
		}
	}
}

void AEscapeChroniclesGameMode::LoadPlayerNowOrWhenPawnIsPossessed(APlayerController* PlayerController) const
{
#if DO_CHECK
	check(IsValid(PlayerController));
	check(IsValid(PlayerController->PlayerState));
#endif

	// If the controller already possesses a pawn, then we can already load the player
	if (IsValid(PlayerController->GetPawn()))
	{
		LoadPlayerOrGenerateUniquePlayerIdForPlayer(PlayerController);
	}
	// Otherwise, wait for the pawn to be possessed
	else
	{
		PlayerController->GetOnNewPawnNotifier().AddUObject(this, &ThisClass::OnPlayerToLoadPawnChanged);
	}
}

// ReSharper disable once CppParameterMayBeConstPtrOrRef
void AEscapeChroniclesGameMode::OnPlayerToLoadPawnChanged(APawn* NewPawn) const
{
	if (!IsValid(NewPawn))
	{
		return;
	}

	APlayerController* PlayerController = NewPawn->GetController<APlayerController>();

	if (!ensureAlways(IsValid(PlayerController)))
	{
		return;
	}

	// Stop listening for the new pawn possessed event because we needed it only for the first pawn
	PlayerController->GetOnNewPawnNotifier().RemoveAll(this);

	LoadPlayerOrGenerateUniquePlayerIdForPlayer(PlayerController);
}

void AEscapeChroniclesGameMode::LoadPlayerOrGenerateUniquePlayerIdForPlayer(
	const APlayerController* PlayerController) const
{
#if DO_CHECK
	check(IsValid(PlayerController));
	check(IsValid(PlayerController->PlayerState));
#endif

#if DO_ENSURE
	ensureAlways(bInitialGameLoadFinishedOrFailed);
#endif

	const USaveGameSubsystem* SaveGameSubsystem = GetWorld()->GetSubsystem<USaveGameSubsystem>();

	if (ensureAlways(IsValid(SaveGameSubsystem)))
	{
		SaveGameSubsystem->LoadPlayerFromCurrentSaveGameObjectOrGenerateUniquePlayerIdForPlayer(
			CastChecked<AEscapeChroniclesPlayerState>(PlayerController->PlayerState));
	}
}