// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "UniquePlayerID.generated.h"

/**
 * A struct that is used to identify a player or a bot in the game. It contains a unique ID and a net ID that is
 * optional for the host (Listen Server) and can be assigned later. Bots should leave the net ID empty. This struct can
 * be serialized and saved to a save file or sent over the network.
 */
USTRUCT()
struct FUniquePlayerID
{
	GENERATED_BODY()

	FUniquePlayerID() = default;

	explicit FUniquePlayerID(const uint64 InPlayerId)
	{
		PlayerID = InPlayerId;
	}

	FUniquePlayerID(const uint64 InPlayerId, const FString& InNetId)
	{
		PlayerID = InPlayerId;
		NetID = InNetId;
	}

	// ID of the player or the bot generated by FUniquePlayerIdManager
	UPROPERTY()
	uint64 PlayerID = -1;

	/**
	 * FUniqueNetId from the online subsystem associated with the player. Empty for bots and for players that were never
	 * connected online. If the host is connected online or 
	 */
	UPROPERTY()
	FString NetID;

	/**
	 * @return True if either the PlayerId or NetId are not empty. If the PlayerId is empty while the NetId is not, then
	 * you must set the PlayerId.
	 */
	bool IsValid() const
	{
		return PlayerID != -1 || !NetID.IsEmpty();
	}

	/**
	 * @return True if the PlayerId is the same as the other one or if the NetId isn't empty and is the same as the
	 * other one.
	 */
	bool operator==(const FUniquePlayerID& Other) const
	{
		return PlayerID == Other.PlayerID || (!NetID.IsEmpty() && NetID == Other.NetID);
	}
};

// This is required to use FUniquePlayerID as a key in TMap and TSet
FORCEINLINE uint32 GetTypeHash(const FUniquePlayerID& UniquePlayerID)
{
	return FCrc::MemCrc32(&UniquePlayerID, sizeof(UniquePlayerID));
}

/**
 * A struct that handles the generation of unique player IDs. It makes sure that each ID is unique. This struct can be
 * serialized and saved to a save file or sent over the network.
 */
USTRUCT()
struct FUniquePlayerIdManager
{
	GENERATED_BODY()

	FUniquePlayerID GenerateUniquePlayerId()
	{
		return FUniquePlayerID(++MaxGeneratedPlayerId);
	}

private:
	UPROPERTY()
	uint64 MaxGeneratedPlayerId = -1;
};