// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "UniquePlayerID.generated.h"

/**
 * A struct that is used to identify a player or a bot in the game. It contains a unique ID and a net ID that is
 * optional for the host (Listen Server) and can be assigned later. Bots should leave the net ID empty. This struct can
 * be serialized and saved to a save file or sent over the network.
 */
USTRUCT()
struct FUniquePlayerID
{
	GENERATED_BODY()

	// Default constructor. Creates invalid FUniquePlayerID.
	FUniquePlayerID() = default;

	FUniquePlayerID(const uint64 InPlayerId, const int32 InLocalPlayerId)
	{
		PlayerID = InPlayerId;
		LocalPlayerID = InLocalPlayerId;
	}

	FUniquePlayerID(const uint64 InPlayerId, const FString& InNetId, const int32 InLocalPlayerId)
	{
		PlayerID = InPlayerId;
		NetID = InNetId;
		LocalPlayerID = InLocalPlayerId;
	}

	// ID of the player or the bot generated by FUniquePlayerIdManager
	UPROPERTY(SaveGame)
	uint64 PlayerID = INDEX_NONE;

	/**
	 * FUniqueNetId from the online subsystem associated with the player. Empty for bots and for players that were never
	 * connected online. If the host is connected online or 
	 */
	UPROPERTY(SaveGame)
	FString NetID;

	/**
	 * ID of the local player. Could be set with the PIE instance's ID/index or with an ID/index of the split-screen
	 * player.
	 */
	UPROPERTY(SaveGame)
	uint8 LocalPlayerID = INDEX_NONE;

	/**
	 * @return True if either the PlayerId or NetId are not empty. If the PlayerId is empty while the NetId is not, then
	 * you must set the PlayerId. LocalPlayerID is required to be initialized with any value starting from -1.
	 */
	bool IsValid() const
	{
		return (PlayerID != INDEX_NONE || !NetID.IsEmpty()) && LocalPlayerID != INDEX_NONE;
	}

	/**
	 * @return True, if the PlayerId is the same as the other one or if the NetId isn't empty and is the same as the
	 * other one. The LocalPlayerID should always be the same to return true.
	 */
	bool operator==(const FUniquePlayerID& Other) const
	{
		return (PlayerID == Other.PlayerID || (!NetID.IsEmpty() && NetID == Other.NetID)) &&
			LocalPlayerID == Other.LocalPlayerID;
	}

	/**
	 * @return True if all fields of this instance and another instance are equal.
	 * @remark Consider using the operator== instead of this function in most cases.
	 */
	bool ExactlyEquals(const FUniquePlayerID& Other) const
	{
		return PlayerID == Other.PlayerID && NetID == Other.NetID && LocalPlayerID == Other.LocalPlayerID;
	}
};

// This is required to use FUniquePlayerID as a key in TMap and TSet
FORCEINLINE uint32 GetTypeHash(const FUniquePlayerID& UniquePlayerID)
{
	/**
	 * Get the hash of the LocalPlayerID as it's the only field that is guaranteed to be same for different instances of
	 * this struct where Instance1 == Instance2 returns true. Other fields could be different even if
	 * Instance1 == Instance2 returns true. This will of course lead to a lot of collisions which leads to worse
	 * performance but we don't have any other option here for GetTypeHash to always return the same value for different
	 * structs that pass the equality check.
	 * P.S.: If we didn't have the LocalPlayerID field, we would always return the same hash for all instances of this
	 * struct ðŸ¥².
	 */
	return GetTypeHash(UniquePlayerID.LocalPlayerID);
}

/**
 * A struct that handles the generation of unique player IDs. It makes sure that each ID is unique. This struct can be
 * serialized and saved to a save file or sent over the network.
 */
USTRUCT()
struct FUniquePlayerIdManager
{
	GENERATED_BODY()

	FUniquePlayerID GenerateUniquePlayerID(const int32 LocalPlayerID)
	{
		return FUniquePlayerID(++MaxGeneratedPlayerID, LocalPlayerID);
	}

#if WITH_EDITOR
	/**
	 * Generates FUniquePlayerID with a PIE index as the LocalPlayerID. This works because PIE windows are always
	 * created in the same order.
	 */
	FUniquePlayerID GenerateUniquePlayerIdForPIE()
	{
		return GenerateUniquePlayerID(++LastOpenedPIEIndex);
	}
#endif

private:
	UPROPERTY(SaveGame)
	uint64 MaxGeneratedPlayerID = INDEX_NONE;

	uint8 LastOpenedPIEIndex = INDEX_NONE;
};